{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 1,
  "links": [],
  "panels": [
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 18,
      "panels": [],
      "title": "Row title",
      "type": "row"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "deor32yv7hgcgb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisGridShow": true,
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 15,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "smooth",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 3,
        "x": 0,
        "y": 1
      },
      "id": 1,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "table",
          "placement": "bottom",
          "showLegend": false
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "deor32yv7hgcgb"
          },
          "query": "import \"math\"\n\npoints = 60\n\nrangeStart = int(v: uint(v: v.timeRangeStart))\nrangeStop = int(v: uint(v: v.timeRangeStop))\nrangeDurationNs = rangeStop - rangeStart\n\nintervalNs = rangeDurationNs / points\nintervalNsCeil = int(v: math.ceil(x: float(v: intervalNs)))\n\n// Минимум 1 секунда в наносекундах\nminIntervalNs = 1000000000\n\nfinalIntervalNs = if intervalNsCeil < minIntervalNs then minIntervalNs else intervalNsCeil\nfinalInterval = duration(v: finalIntervalNs)\n\nfrom(bucket:\"statistic\")\n|> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n|> filter(fn: (r) => r._measurement == \"SystemStatistic\" and r._field == \"cpu\" and r.host =~ /${host:regex}/)\n|> drop(columns: [\"host\"])\n|> aggregateWindow(every: finalInterval, fn: mean, createEmpty: false)",
          "refId": "A"
        }
      ],
      "title": "Cpu",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "deor32yv7hgcgb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisGridShow": true,
            "axisLabel": "",
            "axisPlacement": "left",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 60,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "smooth",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 0,
            "pointSize": 5,
            "scaleDistribution": {
              "log": 2,
              "type": "log"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "normal"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "ns"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 3,
        "x": 3,
        "y": 1
      },
      "id": 13,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "table",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "deor32yv7hgcgb"
          },
          "query": "import \"math\"\n\npoints = 60\n\nrangeStart = int(v: uint(v: v.timeRangeStart))\nrangeStop = int(v: uint(v: v.timeRangeStop))\nrangeDurationNs = rangeStop - rangeStart\n\nintervalNs = rangeDurationNs / points\nintervalNsCeil = int(v: math.ceil(x: float(v: intervalNs)))\n\n// Минимум 1 секунда в наносекундах\nminIntervalNs = 1000000000\n\nfinalIntervalNs = if intervalNsCeil < minIntervalNs then minIntervalNs else intervalNsCeil\nfinalInterval = duration(v: finalIntervalNs)\n\nfrom(bucket:\"statistic\")\n|> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n|> filter(fn: (r) => r._measurement == \"ServiceTimer\" and (r._field == \"sum\") and r.host =~ /${host:regex}/)\n|> drop(columns: [\"host\", \"_field\"])\n|> aggregateWindow(every: finalInterval, fn: mean, createEmpty: false)",
          "refId": "A"
        }
      ],
      "title": "sum::ServiceTimer",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "deor32yv7hgcgb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisGridShow": true,
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 70,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "smooth",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 0,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "normal"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 3,
        "x": 9,
        "y": 1
      },
      "id": 4,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "table",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "deor32yv7hgcgb"
          },
          "query": "import \"math\"\n\npoints = 60\n\nrangeStart = int(v: uint(v: v.timeRangeStart))\nrangeStop = int(v: uint(v: v.timeRangeStop))\nrangeDurationNs = rangeStop - rangeStart\n\nintervalNs = rangeDurationNs / points\nintervalNsCeil = int(v: math.ceil(x: float(v: intervalNs)))\n\n// Минимум 1 секунда в наносекундах\nminIntervalNs = 1000000000\n\nfinalIntervalNs = if intervalNsCeil < minIntervalNs then minIntervalNs else intervalNsCeil\nfinalInterval = duration(v: finalIntervalNs)\n\nfrom(bucket:\"statistic\")\n|> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n|> filter(fn: (r) => r._measurement == \"BrokerMemory\" and (r._field == \"size\") and r.host =~ /${host:regex}/)\n|> drop(columns: [\"host\", \"_field\"])\n|> aggregateWindow(every: finalInterval, fn: mean, createEmpty: false)",
          "refId": "A"
        }
      ],
      "title": "size::BrokerMemory",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "deor32yv7hgcgb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisGridShow": true,
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 60,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "smooth",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 0,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "normal"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 3,
        "x": 12,
        "y": 1
      },
      "id": 9,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "table",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "deor32yv7hgcgb"
          },
          "query": "import \"math\"\n\npoints = 60\n\nrangeStart = int(v: uint(v: v.timeRangeStart))\nrangeStop = int(v: uint(v: v.timeRangeStop))\nrangeDurationNs = rangeStop - rangeStart\n\nintervalNs = rangeDurationNs / points\nintervalNsCeil = int(v: math.ceil(x: float(v: intervalNs)))\n\n// Минимум 1 секунда в наносекундах\nminIntervalNs = 1000000000\n\nfinalIntervalNs = if intervalNsCeil < minIntervalNs then minIntervalNs else intervalNsCeil\nfinalInterval = duration(v: finalIntervalNs)\n\nfrom(bucket:\"statistic\")\n|> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n|> filter(fn: (r) => r._measurement == \"PoolThreadExecutePromiseTask\" and (r._field == \"item\") and r.host =~ /${host:regex}/)\n|> drop(columns: [\"host\", \"_field\"])\n|> aggregateWindow(every: finalInterval, fn: mean, createEmpty: false)",
          "refId": "A"
        }
      ],
      "title": "size::PoolThreadExecutePromiseTask",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "deor32yv7hgcgb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisGridShow": true,
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 60,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "smooth",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 0,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "normal"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 3,
        "x": 15,
        "y": 1
      },
      "id": 19,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "table",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "deor32yv7hgcgb"
          },
          "query": "import \"math\"\n\npoints = 60\n\nrangeStart = int(v: uint(v: v.timeRangeStart))\nrangeStop = int(v: uint(v: v.timeRangeStop))\nrangeDurationNs = rangeStop - rangeStart\n\nintervalNs = rangeDurationNs / points\nintervalNsCeil = int(v: math.ceil(x: float(v: intervalNs)))\n\n// Минимум 1 секунда в наносекундах\nminIntervalNs = 1000000000\n\nfinalIntervalNs = if intervalNsCeil < minIntervalNs then minIntervalNs else intervalNsCeil\nfinalInterval = duration(v: finalIntervalNs)\n\nfrom(bucket:\"statistic\")\n|> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n|> filter(fn: (r) => r._measurement == \"PoolResourceForPromiseTaskWaitResource\" and (r._field == \"item\") and r.host =~ /${host:regex}/)\n|> drop(columns: [\"host\", \"_field\"])\n|> aggregateWindow(every: finalInterval, fn: mean, createEmpty: false)",
          "refId": "A"
        }
      ],
      "title": "size::PoolResourceForPromiseTaskWaitResource",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "deor32yv7hgcgb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisGridShow": true,
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 60,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "smooth",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 0,
            "pointSize": 5,
            "scaleDistribution": {
              "log": 2,
              "type": "log"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "normal"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "none"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 3,
        "x": 18,
        "y": 1
      },
      "id": 23,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "table",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "deor32yv7hgcgb"
          },
          "query": "import \"math\"\n\npoints = 60\n\nrangeStart = int(v: uint(v: v.timeRangeStart))\nrangeStop = int(v: uint(v: v.timeRangeStop))\nrangeDurationNs = rangeStop - rangeStart\n\nintervalNs = rangeDurationNs / points\nintervalNsCeil = int(v: math.ceil(x: float(v: intervalNs)))\n\n// Минимум 1 секунда в наносекундах\nminIntervalNs = 1000000000\n\nfinalIntervalNs = if intervalNsCeil < minIntervalNs then minIntervalNs else intervalNsCeil\nfinalInterval = duration(v: finalIntervalNs)\n\nfrom(bucket:\"statistic\")\n|> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n|> filter(fn: (r) => r._measurement == \"ExpirationList\" and (r._field == \"bucket\") and r.host =~ /${host:regex}/)\n|> drop(columns: [\"host\", \"_field\"])\n|> aggregateWindow(every: finalInterval, fn: mean, createEmpty: false)",
          "refId": "A"
        }
      ],
      "title": "bucket::ExpirationList",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "deor32yv7hgcgb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisGridShow": true,
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 60,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "smooth",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 0,
            "pointSize": 5,
            "scaleDistribution": {
              "log": 2,
              "type": "log"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "normal"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "ms"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 3,
        "x": 21,
        "y": 1
      },
      "id": 15,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "table",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "deor32yv7hgcgb"
          },
          "query": "import \"math\"\n\npoints = 60\n\nrangeStart = int(v: uint(v: v.timeRangeStart))\nrangeStop = int(v: uint(v: v.timeRangeStop))\nrangeDurationNs = rangeStop - rangeStart\n\nintervalNs = rangeDurationNs / points\nintervalNsCeil = int(v: math.ceil(x: float(v: intervalNs)))\n\n// Минимум 1 секунда в наносекундах\nminIntervalNs = 1000000000\n\nfinalIntervalNs = if intervalNsCeil < minIntervalNs then minIntervalNs else intervalNsCeil\nfinalInterval = duration(v: finalIntervalNs)\n\nfrom(bucket:\"statistic\")\n|> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n|> filter(fn: (r) => r._measurement == \"AsyncFileWriterRolling\" and (r._field == \"writeTime\") and r.host =~ /${host:regex}/)\n|> drop(columns: [\"host\", \"_field\"])\n|> aggregateWindow(every: finalInterval, fn: mean, createEmpty: false)",
          "refId": "A"
        }
      ],
      "title": "writeTime::AsyncFileWriterRolling",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "deor32yv7hgcgb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisGridShow": true,
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 15,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "smooth",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "log": 2,
              "type": "log"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "bytes"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 3,
        "x": 0,
        "y": 8
      },
      "id": 2,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "table",
          "placement": "bottom",
          "showLegend": false
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "deor32yv7hgcgb"
          },
          "query": "import \"math\"\n\npoints = 60\n\nrangeStart = int(v: uint(v: v.timeRangeStart))\nrangeStop = int(v: uint(v: v.timeRangeStop))\nrangeDurationNs = rangeStop - rangeStart\n\nintervalNs = rangeDurationNs / points\nintervalNsCeil = int(v: math.ceil(x: float(v: intervalNs)))\n\n// Минимум 1 секунда в наносекундах\nminIntervalNs = 1000000000\n\nfinalIntervalNs = if intervalNsCeil < minIntervalNs then minIntervalNs else intervalNsCeil\nfinalInterval = duration(v: finalIntervalNs)\n\nfrom(bucket:\"statistic\")\n|> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n|> filter(fn: (r) => r._measurement == \"SystemStatistic\" and (r._field == \"heapSizeMax\" or r._field == \"heapSize\" or r._field == \"heapSizeUse\") and r.host =~ /${host:regex}/)\n|> drop(columns: [\"host\"])\n|> aggregateWindow(every: finalInterval, fn: mean, createEmpty: false)",
          "refId": "A"
        }
      ],
      "title": "Heap",
      "transformations": [
        {
          "id": "prepareTimeSeries",
          "options": {
            "format": "wide"
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "includeByName": {},
            "indexByName": {
              "Time": 0,
              "heapSize SystemStatistic": 3,
              "heapSizeMax SystemStatistic": 1,
              "heapSizeUse SystemStatistic": 2
            },
            "renameByName": {
              "heapSize SystemStatistic": "cur",
              "heapSizeFree SystemStatistic": "free",
              "heapSizeMax SystemStatistic": "max",
              "heapSizeUse SystemStatistic": "use"
            }
          }
        }
      ],
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "deor32yv7hgcgb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisGridShow": true,
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 70,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "smooth",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 0,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "normal"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "ms"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 3,
        "x": 3,
        "y": 8
      },
      "id": 5,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "table",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "deor32yv7hgcgb"
          },
          "query": "import \"math\"\n\npoints = 60\n\nrangeStart = int(v: uint(v: v.timeRangeStart))\nrangeStop = int(v: uint(v: v.timeRangeStop))\nrangeDurationNs = rangeStop - rangeStart\n\nintervalNs = rangeDurationNs / points\nintervalNsCeil = int(v: math.ceil(x: float(v: intervalNs)))\n\n// Минимум 1 секунда в наносекундах\nminIntervalNs = 1000000000\n\nfinalIntervalNs = if intervalNsCeil < minIntervalNs then minIntervalNs else intervalNsCeil\nfinalInterval = duration(v: finalIntervalNs)\n\nfrom(bucket:\"statistic\")\n|> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n|> filter(fn: (r) => r._measurement == \"BrokerMemory\" and (r._field == \"timeInQueue\") and r.host =~ /${host:regex}/)\n|> drop(columns: [\"host\", \"_field\"])\n|> aggregateWindow(every: finalInterval, fn: mean, createEmpty: false)",
          "refId": "A"
        }
      ],
      "title": "timeInQueue::BrokerMemory",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "deor32yv7hgcgb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisGridShow": true,
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 60,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "smooth",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 0,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "normal"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 3,
        "x": 9,
        "y": 8
      },
      "id": 3,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "table",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "deor32yv7hgcgb"
          },
          "query": "import \"math\"\n\npoints = 60\n\nrangeStart = int(v: uint(v: v.timeRangeStart))\nrangeStop = int(v: uint(v: v.timeRangeStop))\nrangeDurationNs = rangeStop - rangeStart\n\nintervalNs = rangeDurationNs / points\nintervalNsCeil = int(v: math.ceil(x: float(v: intervalNs)))\n\n// Минимум 1 секунда в наносекундах\nminIntervalNs = 1000000000\n\nfinalIntervalNs = if intervalNsCeil < minIntervalNs then minIntervalNs else intervalNsCeil\nfinalInterval = duration(v: finalIntervalNs)\n\nfrom(bucket: \"statistic\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"BrokerMemory\" and r._field == \"tpsEnq\" and r.host =~ /${host:regex}/)\n  |> drop(columns: [\"host\", \"_field\"])\n  |> aggregateWindow(every: finalInterval, fn: mean, createEmpty: false)\n",
          "refId": "A"
        }
      ],
      "title": "tpsEnq::BrokerMemory",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "deor32yv7hgcgb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisGridShow": true,
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 60,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "smooth",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 0,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "normal"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 3,
        "x": 12,
        "y": 8
      },
      "id": 10,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "table",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "deor32yv7hgcgb"
          },
          "query": "import \"math\"\n\npoints = 60\n\nrangeStart = int(v: uint(v: v.timeRangeStart))\nrangeStop = int(v: uint(v: v.timeRangeStop))\nrangeDurationNs = rangeStop - rangeStart\n\nintervalNs = rangeDurationNs / points\nintervalNsCeil = int(v: math.ceil(x: float(v: intervalNs)))\n\n// Минимум 1 секунда в наносекундах\nminIntervalNs = 1000000000\n\nfinalIntervalNs = if intervalNsCeil < minIntervalNs then minIntervalNs else intervalNsCeil\nfinalInterval = duration(v: finalIntervalNs)\n\nfrom(bucket:\"statistic\")\n|> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n|> filter(fn: (r) => r._measurement == \"PoolThreadExecutePromiseTask\" and (r._field == \"park\") and r.host =~ /${host:regex}/)\n|> drop(columns: [\"host\", \"_field\"])\n|> aggregateWindow(every: finalInterval, fn: mean, createEmpty: false)",
          "refId": "A"
        }
      ],
      "title": "park::PoolThreadExecutePromiseTask",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "deor32yv7hgcgb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisGridShow": true,
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 60,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "smooth",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 0,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "normal"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 3,
        "x": 15,
        "y": 8
      },
      "id": 20,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "table",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "deor32yv7hgcgb"
          },
          "query": "import \"math\"\n\npoints = 60\n\nrangeStart = int(v: uint(v: v.timeRangeStart))\nrangeStop = int(v: uint(v: v.timeRangeStop))\nrangeDurationNs = rangeStop - rangeStart\n\nintervalNs = rangeDurationNs / points\nintervalNsCeil = int(v: math.ceil(x: float(v: intervalNs)))\n\n// Минимум 1 секунда в наносекундах\nminIntervalNs = 1000000000\n\nfinalIntervalNs = if intervalNsCeil < minIntervalNs then minIntervalNs else intervalNsCeil\nfinalInterval = duration(v: finalIntervalNs)\n\nfrom(bucket:\"statistic\")\n|> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n|> filter(fn: (r) => r._measurement == \"PoolResourceForPromiseTaskWaitResource\" and (r._field == \"park\") and r.host =~ /${host:regex}/)\n|> drop(columns: [\"host\", \"_field\"])\n|> aggregateWindow(every: finalInterval, fn: mean, createEmpty: false)",
          "refId": "A"
        }
      ],
      "title": "park::PoolResourceForPromiseTaskWaitResource",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "deor32yv7hgcgb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisGridShow": true,
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 60,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "smooth",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 0,
            "pointSize": 5,
            "scaleDistribution": {
              "log": 2,
              "type": "log"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "normal"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "none"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 3,
        "x": 18,
        "y": 8
      },
      "id": 16,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "table",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "deor32yv7hgcgb"
          },
          "query": "import \"math\"\n\npoints = 60\n\nrangeStart = int(v: uint(v: v.timeRangeStart))\nrangeStop = int(v: uint(v: v.timeRangeStop))\nrangeDurationNs = rangeStop - rangeStart\n\nintervalNs = rangeDurationNs / points\nintervalNsCeil = int(v: math.ceil(x: float(v: intervalNs)))\n\n// Минимум 1 секунда в наносекундах\nminIntervalNs = 1000000000\n\nfinalIntervalNs = if intervalNsCeil < minIntervalNs then minIntervalNs else intervalNsCeil\nfinalInterval = duration(v: finalIntervalNs)\n\nfrom(bucket:\"statistic\")\n|> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n|> filter(fn: (r) => r._measurement == \"ExpirationList\" and (r._field == \"item\") and r.host =~ /${host:regex}/)\n|> drop(columns: [\"host\", \"_field\"])\n|> aggregateWindow(every: finalInterval, fn: mean, createEmpty: false)",
          "refId": "A"
        }
      ],
      "title": "item::ExpirationList",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "deor32yv7hgcgb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisGridShow": true,
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 60,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "smooth",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 0,
            "pointSize": 5,
            "scaleDistribution": {
              "log": 2,
              "type": "log"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "normal"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "bytes"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 3,
        "x": 21,
        "y": 8
      },
      "id": 25,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "table",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "deor32yv7hgcgb"
          },
          "query": "import \"math\"\n\npoints = 60\n\nrangeStart = int(v: uint(v: v.timeRangeStart))\nrangeStop = int(v: uint(v: v.timeRangeStop))\nrangeDurationNs = rangeStop - rangeStart\n\nintervalNs = rangeDurationNs / points\nintervalNsCeil = int(v: math.ceil(x: float(v: intervalNs)))\n\n// Минимум 1 секунда в наносекундах\nminIntervalNs = 1000000000\n\nfinalIntervalNs = if intervalNsCeil < minIntervalNs then minIntervalNs else intervalNsCeil\nfinalInterval = duration(v: finalIntervalNs)\n\nfrom(bucket:\"statistic\")\n|> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n|> filter(fn: (r) => r._measurement == \"AsyncFileWriterRolling\" and (r._field == \"position\") and r.host =~ /${host:regex}/)\n|> drop(columns: [\"host\", \"_field\"])\n|> aggregateWindow(every: finalInterval, fn: mean, createEmpty: false)",
          "refId": "A"
        }
      ],
      "title": "position::AsyncFileWriterRolling",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "deor32yv7hgcgb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisGridShow": true,
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 70,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "smooth",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 0,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "normal"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "fieldMinMax": false,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "none"
        },
        "overrides": [
          {
            "__systemRef": "hideSeriesFrom",
            "matcher": {
              "id": "byNames",
              "options": {
                "mode": "exclude",
                "names": [
                  "$.ThreadPoolExecutePromiseTask[Helper1s.ExpirationList]"
                ],
                "prefix": "All except:",
                "readOnly": true
              }
            },
            "properties": [
              {
                "id": "custom.hideFrom",
                "value": {
                  "legend": false,
                  "tooltip": false,
                  "viz": true
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 7,
        "w": 3,
        "x": 0,
        "y": 15
      },
      "id": 27,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "table",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "deor32yv7hgcgb"
          },
          "query": "import \"math\"\n\npoints = 60\n\nrangeStart = int(v: uint(v: v.timeRangeStart))\nrangeStop = int(v: uint(v: v.timeRangeStop))\nrangeDurationNs = rangeStop - rangeStart\n\nintervalNs = rangeDurationNs / points\nintervalNsCeil = int(v: math.ceil(x: float(v: intervalNs)))\n\n// Минимум 1 секунда в наносекундах\nminIntervalNs = 1000000000\n\nfinalIntervalNs = if intervalNsCeil < minIntervalNs then minIntervalNs else intervalNsCeil\nfinalInterval = duration(v: finalIntervalNs)\n\nfrom(bucket:\"statistic\")\n|> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n|> filter(fn: (r) => r._measurement == \"QueueRetry\" and (r._field == \"park\") and r.host =~ /${host:regex}/)\n|> drop(columns: [\"host\", \"_field\"])\n|> aggregateWindow(every: finalInterval, fn: mean, createEmpty: false)",
          "refId": "A"
        }
      ],
      "title": "parkSize::QueueRetry",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "deor32yv7hgcgb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisGridShow": true,
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 70,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "smooth",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 0,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "normal"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "fieldMinMax": false,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "none"
        },
        "overrides": [
          {
            "__systemRef": "hideSeriesFrom",
            "matcher": {
              "id": "byNames",
              "options": {
                "mode": "exclude",
                "names": [
                  "$.ThreadPoolExecutePromiseTask[Helper1s.ExpirationList]"
                ],
                "prefix": "All except:",
                "readOnly": true
              }
            },
            "properties": [
              {
                "id": "custom.hideFrom",
                "value": {
                  "legend": false,
                  "tooltip": false,
                  "viz": true
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 7,
        "w": 3,
        "x": 3,
        "y": 15
      },
      "id": 8,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "table",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "deor32yv7hgcgb"
          },
          "query": "import \"math\"\n\npoints = 60\n\nrangeStart = int(v: uint(v: v.timeRangeStart))\nrangeStop = int(v: uint(v: v.timeRangeStop))\nrangeDurationNs = rangeStop - rangeStart\n\nintervalNs = rangeDurationNs / points\nintervalNsCeil = int(v: math.ceil(x: float(v: intervalNs)))\n\n// Минимум 1 секунда в наносекундах\nminIntervalNs = 1000000000\n\nfinalIntervalNs = if intervalNsCeil < minIntervalNs then minIntervalNs else intervalNsCeil\nfinalInterval = duration(v: finalIntervalNs)\n\nfrom(bucket:\"statistic\")\n|> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n|> filter(fn: (r) => r._measurement == \"RateLimitTps\" and (r._field == \"value\") and r.host =~ /${host:regex}/)\n|> drop(columns: [\"host\", \"_field\"])\n|> aggregateWindow(every: finalInterval, fn: mean, createEmpty: false)",
          "refId": "A"
        }
      ],
      "title": "value::RateLimitTps",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "deor32yv7hgcgb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisGridShow": true,
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 1,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 70,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "smooth",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 0,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "normal"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 3,
        "x": 9,
        "y": 15
      },
      "id": 6,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "table",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "deor32yv7hgcgb"
          },
          "query": "import \"math\"\n\npoints = 60\n\nrangeStart = int(v: uint(v: v.timeRangeStart))\nrangeStop = int(v: uint(v: v.timeRangeStop))\nrangeDurationNs = rangeStop - rangeStart\n\nintervalNs = rangeDurationNs / points\nintervalNsCeil = int(v: math.ceil(x: float(v: intervalNs)))\n\n// Минимум 1 секунда в наносекундах\nminIntervalNs = 1000000000\n\nfinalIntervalNs = if intervalNsCeil < minIntervalNs then minIntervalNs else intervalNsCeil\nfinalInterval = duration(v: finalIntervalNs)\n\nfrom(bucket:\"statistic\")\n|> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n|> filter(fn: (r) => r._measurement == \"BrokerMemory\" and (r._field == \"tpsDeq\") and r.host =~ /${host:regex}/)\n|> drop(columns: [\"host\", \"_field\"])\n|> aggregateWindow(every: finalInterval, fn: mean, createEmpty: false)",
          "refId": "A"
        }
      ],
      "title": "tpsDeq::BrokerMemory",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "deor32yv7hgcgb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisGridShow": true,
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 60,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "smooth",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 0,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "normal"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 3,
        "x": 12,
        "y": 15
      },
      "id": 11,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "table",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "deor32yv7hgcgb"
          },
          "query": "import \"math\"\n\npoints = 60\n\nrangeStart = int(v: uint(v: v.timeRangeStart))\nrangeStop = int(v: uint(v: v.timeRangeStop))\nrangeDurationNs = rangeStop - rangeStart\n\nintervalNs = rangeDurationNs / points\nintervalNsCeil = int(v: math.ceil(x: float(v: intervalNs)))\n\n// Минимум 1 секунда в наносекундах\nminIntervalNs = 1000000000\n\nfinalIntervalNs = if intervalNsCeil < minIntervalNs then minIntervalNs else intervalNsCeil\nfinalInterval = duration(v: finalIntervalNs)\n\nfrom(bucket:\"statistic\")\n|> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n|> filter(fn: (r) => r._measurement == \"PoolThreadExecutePromiseTask\" and (r._field == \"acquire\") and r.host =~ /${host:regex}/)\n|> drop(columns: [\"host\", \"_field\"])\n|> aggregateWindow(every: finalInterval, fn: mean, createEmpty: false)",
          "refId": "A"
        }
      ],
      "title": "acquire::PoolThreadExecutePromiseTask",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "deor32yv7hgcgb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisGridShow": true,
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 60,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "smooth",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 0,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "normal"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 3,
        "x": 15,
        "y": 15
      },
      "id": 21,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "table",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "deor32yv7hgcgb"
          },
          "query": "import \"math\"\n\npoints = 60\n\nrangeStart = int(v: uint(v: v.timeRangeStart))\nrangeStop = int(v: uint(v: v.timeRangeStop))\nrangeDurationNs = rangeStop - rangeStart\n\nintervalNs = rangeDurationNs / points\nintervalNsCeil = int(v: math.ceil(x: float(v: intervalNs)))\n\n// Минимум 1 секунда в наносекундах\nminIntervalNs = 1000000000\n\nfinalIntervalNs = if intervalNsCeil < minIntervalNs then minIntervalNs else intervalNsCeil\nfinalInterval = duration(v: finalIntervalNs)\n\nfrom(bucket:\"statistic\")\n|> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n|> filter(fn: (r) => r._measurement == \"PoolResourceForPromiseTaskWaitResource\" and (r._field == \"acquire\") and r.host =~ /${host:regex}/)\n|> drop(columns: [\"host\", \"_field\"])\n|> aggregateWindow(every: finalInterval, fn: mean, createEmpty: false)",
          "refId": "A"
        }
      ],
      "title": "acquire::PoolResourceForPromiseTaskWaitResource",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "deor32yv7hgcgb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisGridShow": true,
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 60,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "smooth",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 0,
            "pointSize": 5,
            "scaleDistribution": {
              "log": 2,
              "type": "log"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "normal"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "none"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 3,
        "x": 18,
        "y": 15
      },
      "id": 17,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "table",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "deor32yv7hgcgb"
          },
          "query": "import \"math\"\n\npoints = 60\n\nrangeStart = int(v: uint(v: v.timeRangeStart))\nrangeStop = int(v: uint(v: v.timeRangeStop))\nrangeDurationNs = rangeStop - rangeStart\n\nintervalNs = rangeDurationNs / points\nintervalNsCeil = int(v: math.ceil(x: float(v: intervalNs)))\n\n// Минимум 1 секунда в наносекундах\nminIntervalNs = 1000000000\n\nfinalIntervalNs = if intervalNsCeil < minIntervalNs then minIntervalNs else intervalNsCeil\nfinalInterval = duration(v: finalIntervalNs)\n\nfrom(bucket:\"statistic\")\n|> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n|> filter(fn: (r) => r._measurement == \"ExpirationList\" and (r._field == \"remove\") and r.host =~ /${host:regex}/)\n|> drop(columns: [\"host\", \"_field\"])\n|> aggregateWindow(every: finalInterval, fn: mean, createEmpty: false)",
          "refId": "A"
        }
      ],
      "title": "remove::ExpirationList",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "deor32yv7hgcgb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisGridShow": true,
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 60,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "smooth",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 0,
            "pointSize": 5,
            "scaleDistribution": {
              "log": 2,
              "type": "log"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "normal"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "ms"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 3,
        "x": 21,
        "y": 15
      },
      "id": 24,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "table",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "deor32yv7hgcgb"
          },
          "query": "import \"math\"\n\npoints = 60\n\nrangeStart = int(v: uint(v: v.timeRangeStart))\nrangeStop = int(v: uint(v: v.timeRangeStop))\nrangeDurationNs = rangeStop - rangeStart\n\nintervalNs = rangeDurationNs / points\nintervalNsCeil = int(v: math.ceil(x: float(v: intervalNs)))\n\n// Минимум 1 секунда в наносекундах\nminIntervalNs = 1000000000\n\nfinalIntervalNs = if intervalNsCeil < minIntervalNs then minIntervalNs else intervalNsCeil\nfinalInterval = duration(v: finalIntervalNs)\n\nfrom(bucket:\"statistic\")\n|> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n|> filter(fn: (r) => r._measurement == \"AsyncFileWriterWal\" and (r._field == \"writeTime\") and r.host =~ /${host:regex}/)\n|> drop(columns: [\"host\", \"_field\"])\n|> aggregateWindow(every: finalInterval, fn: mean, createEmpty: false)",
          "refId": "A"
        }
      ],
      "title": "writeTime::AsyncFileWriterWal",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "deor32yv7hgcgb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisGridShow": true,
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 70,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "smooth",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 0,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "normal"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "fieldMinMax": false,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "none"
        },
        "overrides": [
          {
            "__systemRef": "hideSeriesFrom",
            "matcher": {
              "id": "byNames",
              "options": {
                "mode": "exclude",
                "names": [
                  "$.ThreadPoolExecutePromiseTask[Helper1s.ExpirationList]"
                ],
                "prefix": "All except:",
                "readOnly": true
              }
            },
            "properties": [
              {
                "id": "custom.hideFrom",
                "value": {
                  "legend": false,
                  "tooltip": false,
                  "viz": true
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 7,
        "w": 3,
        "x": 0,
        "y": 22
      },
      "id": 28,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "table",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "deor32yv7hgcgb"
          },
          "query": "import \"math\"\n\npoints = 60\n\nrangeStart = int(v: uint(v: v.timeRangeStart))\nrangeStop = int(v: uint(v: v.timeRangeStop))\nrangeDurationNs = rangeStop - rangeStart\n\nintervalNs = rangeDurationNs / points\nintervalNsCeil = int(v: math.ceil(x: float(v: intervalNs)))\n\n// Минимум 1 секунда в наносекундах\nminIntervalNs = 1000000000\n\nfinalIntervalNs = if intervalNsCeil < minIntervalNs then minIntervalNs else intervalNsCeil\nfinalInterval = duration(v: finalIntervalNs)\n\nfrom(bucket:\"statistic\")\n|> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n|> filter(fn: (r) => r._measurement == \"QueueRetry\" and (r._field == \"position\") and r.host =~ /${host:regex}/)\n|> drop(columns: [\"host\", \"_field\"])\n|> aggregateWindow(every: finalInterval, fn: mean, createEmpty: false)",
          "refId": "A"
        }
      ],
      "title": "positionSize::QueueRetry",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "deor32yv7hgcgb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisGridShow": true,
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 1,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 70,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "smooth",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 0,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "normal"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 3,
        "x": 9,
        "y": 22
      },
      "id": 7,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "table",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "deor32yv7hgcgb"
          },
          "query": "import \"math\"\n\npoints = 60\n\nrangeStart = int(v: uint(v: v.timeRangeStart))\nrangeStop = int(v: uint(v: v.timeRangeStop))\nrangeDurationNs = rangeStop - rangeStart\n\nintervalNs = rangeDurationNs / points\nintervalNsCeil = int(v: math.ceil(x: float(v: intervalNs)))\n\n// Минимум 1 секунда в наносекундах\nminIntervalNs = 1000000000\n\nfinalIntervalNs = if intervalNsCeil < minIntervalNs then minIntervalNs else intervalNsCeil\nfinalInterval = duration(v: finalIntervalNs)\n\nfrom(bucket:\"statistic\")\n|> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n|> filter(fn: (r) => r._measurement == \"BrokerMemory\" and (r._field == \"tpsDrop\") and r.host =~ /${host:regex}/)\n|> drop(columns: [\"host\", \"_field\"])\n|> aggregateWindow(every: finalInterval, fn: mean, createEmpty: false)",
          "refId": "A"
        }
      ],
      "title": "tpsDrop::BrokerMemory",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "deor32yv7hgcgb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisGridShow": true,
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 60,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "smooth",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 0,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "normal"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 3,
        "x": 12,
        "y": 22
      },
      "id": 12,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "table",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "deor32yv7hgcgb"
          },
          "query": "import \"math\"\n\npoints = 60\n\nrangeStart = int(v: uint(v: v.timeRangeStart))\nrangeStop = int(v: uint(v: v.timeRangeStop))\nrangeDurationNs = rangeStop - rangeStart\n\nintervalNs = rangeDurationNs / points\nintervalNsCeil = int(v: math.ceil(x: float(v: intervalNs)))\n\n// Минимум 1 секунда в наносекундах\nminIntervalNs = 1000000000\n\nfinalIntervalNs = if intervalNsCeil < minIntervalNs then minIntervalNs else intervalNsCeil\nfinalInterval = duration(v: finalIntervalNs)\n\nfrom(bucket:\"statistic\")\n|> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n|> filter(fn: (r) => r._measurement == \"PoolThreadExecutePromiseTask\" and (r._field == \"release\") and r.host =~ /${host:regex}/)\n|> drop(columns: [\"host\", \"_field\"])\n|> aggregateWindow(every: finalInterval, fn: mean, createEmpty: false)",
          "refId": "A"
        }
      ],
      "title": "release::PoolThreadExecutePromiseTask",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "deor32yv7hgcgb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisGridShow": true,
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 60,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "smooth",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 0,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "normal"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 3,
        "x": 15,
        "y": 22
      },
      "id": 22,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "table",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "deor32yv7hgcgb"
          },
          "query": "import \"math\"\n\npoints = 60\n\nrangeStart = int(v: uint(v: v.timeRangeStart))\nrangeStop = int(v: uint(v: v.timeRangeStop))\nrangeDurationNs = rangeStop - rangeStart\n\nintervalNs = rangeDurationNs / points\nintervalNsCeil = int(v: math.ceil(x: float(v: intervalNs)))\n\n// Минимум 1 секунда в наносекундах\nminIntervalNs = 1000000000\n\nfinalIntervalNs = if intervalNsCeil < minIntervalNs then minIntervalNs else intervalNsCeil\nfinalInterval = duration(v: finalIntervalNs)\n\nfrom(bucket:\"statistic\")\n|> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n|> filter(fn: (r) => r._measurement == \"PoolResourceForPromiseTaskWaitResource\" and (r._field == \"release\") and r.host =~ /${host:regex}/)\n|> drop(columns: [\"host\", \"_field\"])\n|> aggregateWindow(every: finalInterval, fn: mean, createEmpty: false)",
          "refId": "A"
        }
      ],
      "title": "release::PoolResourceForPromiseTaskWaitResource",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "deor32yv7hgcgb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisGridShow": true,
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 60,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "smooth",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 0,
            "pointSize": 5,
            "scaleDistribution": {
              "log": 2,
              "type": "log"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "normal"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "none"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 3,
        "x": 18,
        "y": 22
      },
      "id": 14,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "table",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "deor32yv7hgcgb"
          },
          "query": "import \"math\"\n\npoints = 60\n\nrangeStart = int(v: uint(v: v.timeRangeStart))\nrangeStop = int(v: uint(v: v.timeRangeStop))\nrangeDurationNs = rangeStop - rangeStart\n\nintervalNs = rangeDurationNs / points\nintervalNsCeil = int(v: math.ceil(x: float(v: intervalNs)))\n\n// Минимум 1 секунда в наносекундах\nminIntervalNs = 1000000000\n\nfinalIntervalNs = if intervalNsCeil < minIntervalNs then minIntervalNs else intervalNsCeil\nfinalInterval = duration(v: finalIntervalNs)\n\nfrom(bucket:\"statistic\")\n|> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n|> filter(fn: (r) => r._measurement == \"ExpirationList\" and (r._field == \"expired\") and r.host =~ /${host:regex}/)\n|> drop(columns: [\"host\", \"_field\"])\n|> aggregateWindow(every: finalInterval, fn: mean, createEmpty: false)",
          "refId": "A"
        }
      ],
      "title": "expired::ExpirationList",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "deor32yv7hgcgb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisGridShow": true,
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 60,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "smooth",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 0,
            "pointSize": 5,
            "scaleDistribution": {
              "log": 2,
              "type": "log"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "normal"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "bytes"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 3,
        "x": 21,
        "y": 22
      },
      "id": 26,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "table",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "12.0.1",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "deor32yv7hgcgb"
          },
          "query": "import \"math\"\n\npoints = 60\n\nrangeStart = int(v: uint(v: v.timeRangeStart))\nrangeStop = int(v: uint(v: v.timeRangeStop))\nrangeDurationNs = rangeStop - rangeStart\n\nintervalNs = rangeDurationNs / points\nintervalNsCeil = int(v: math.ceil(x: float(v: intervalNs)))\n\n// Минимум 1 секунда в наносекундах\nminIntervalNs = 1000000000\n\nfinalIntervalNs = if intervalNsCeil < minIntervalNs then minIntervalNs else intervalNsCeil\nfinalInterval = duration(v: finalIntervalNs)\n\nfrom(bucket:\"statistic\")\n|> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n|> filter(fn: (r) => r._measurement == \"AsyncFileWriterWal\" and (r._field == \"position\") and r.host =~ /${host:regex}/)\n|> drop(columns: [\"host\", \"_field\"])\n|> aggregateWindow(every: finalInterval, fn: mean, createEmpty: false)",
          "refId": "A"
        }
      ],
      "title": "position::AsyncFileWriterWal",
      "type": "timeseries"
    }
  ],
  "preload": false,
  "refresh": "5s",
  "schemaVersion": 41,
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {
          "text": "Mac-mini-Ura.local",
          "value": "Mac-mini-Ura.local"
        },
        "datasource": {
          "type": "influxdb",
          "uid": "deor32yv7hgcgb"
        },
        "definition": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(\n    bucket: \"statistic\",\n    tag: \"host\",\n    predicate: (r) => true,\n    start: -3000d\n)",
        "label": "Выберете хост",
        "name": "host",
        "options": [],
        "query": {
          "query": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(\n    bucket: \"statistic\",\n    tag: \"host\",\n    predicate: (r) => true,\n    start: -3000d\n)"
        },
        "refresh": 1,
        "regex": "",
        "type": "query"
      }
    ]
  },
  "time": {
    "from": "now-1m",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "browser",
  "title": "Main",
  "uid": "5e93b665-bbb9-4846-b570-9cc2a2c5e5e5",
  "version": 52
}