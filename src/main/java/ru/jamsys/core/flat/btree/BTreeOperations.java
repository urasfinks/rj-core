package ru.jamsys.core.flat.btree;

import java.util.List;
import java.util.concurrent.locks.ReentrantLock;

/**
 * –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å B-–¥–µ—Ä–µ–≤–æ–º.
 *
 * @param <T> –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö, —Ö—Ä–∞–Ω—è—â–∏—Ö—Å—è –≤ –¥–µ—Ä–µ–≤–µ. –î–æ–ª–∂–µ–Ω —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Comparable.
 */
class BTreeOperations<T extends Comparable<T>> {
    protected int t; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å –¥–µ—Ä–µ–≤–∞
    protected ReentrantLock lock = new ReentrantLock(); // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä.
     *
     * @param t –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å –¥–µ—Ä–µ–≤–∞.
     */
    public BTreeOperations(int t) {
        this.t = t;
    }

    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –∏–Ω–¥–µ–∫—Å –∫–ª—é—á–∞ –≤ —É–∑–ª–µ.
     *
     * @param node –£–∑–µ–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –∏—â–µ–º –∫–ª—é—á.
     * @param key  –ö–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞.
     * @return –ò–Ω–¥–µ–∫—Å –∫–ª—é—á–∞.
     */
    protected int findKeyIndex(BTreeNode<T> node, T key) {
        int i = 0;
        while (i < node.keys.size() && key.compareTo(node.keys.get(i)) > 0) {
            i++;
        }
        return i;
    }

    /**
     * –†–∞–∑–¥–µ–ª—è–µ—Ç –¥–æ—á–µ—Ä–Ω–∏–π —É–∑–µ–ª, –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω.
     *
     * @param parent –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —É–∑–µ–ª.
     */
    protected void splitChild(BTreeNode<T> parent, int index) {
        System.out.println("\nüîª –í—ã–∑–≤–∞–Ω splitChild –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è: " + parent.keys + ", –∏–Ω–¥–µ–∫—Å: " + index);

        BTreeNode<T> child = parent.children.get(index);
        BTreeNode<T> newChild = new BTreeNode<>(child.isLeaf);

        System.out.println("  üîª –ò—Å—Ö–æ–¥–Ω—ã–π —É–∑–µ–ª –î–û —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: " + child.keys);

        T middleKey = child.keys.get(t - 1);
        List<Long> middlePointers = child.pointers.get(t - 1);
        System.out.println("  üîª –°—Ä–µ–¥–Ω–∏–π –∫–ª—é—á –¥–ª—è –ø–æ–¥–Ω—è—Ç–∏—è: " + middleKey);

        parent.keys.add(index, middleKey);
        parent.pointers.add(index, middlePointers);
        System.out.println("  ‚úÖ –†–æ–¥–∏—Ç–µ–ª—å –ü–û–°–õ–ï –≤—Å—Ç–∞–≤–∫–∏ —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–ª—é—á–∞: " + parent.keys);

        newChild.keys.addAll(child.keys.subList(t, child.keys.size()));
        newChild.pointers.addAll(child.pointers.subList(t, child.pointers.size()));

        child.keys.subList(t - 1, child.keys.size()).clear();
        child.pointers.subList(t - 1, child.pointers.size()).clear();

        if (!child.isLeaf) {
            newChild.children.addAll(child.children.subList(t, child.children.size()));
            child.children.subList(t, child.children.size()).clear();
        }

        parent.children.add(index + 1, newChild);
        System.out.println("  ‚úÖ –ù–æ–≤—ã–π –¥–æ—á–µ—Ä–Ω–∏–π —É–∑–µ–ª —Å–æ–∑–¥–∞–Ω: " + newChild.keys);
        System.out.println("  ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–∑–ª–∞ –ø–æ—Å–ª–µ splitChild: " + parent.keys);
    }


}
