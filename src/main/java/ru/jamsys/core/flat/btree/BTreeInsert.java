package ru.jamsys.core.flat.btree;

import ru.jamsys.core.flat.util.UtilLog;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;

/**
 * –ö–ª–∞—Å—Å –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –≤—Å—Ç–∞–≤–∫–∏ –≤ B-–¥–µ—Ä–µ–≤–æ.
 *
 * @param <T> –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö, —Ö—Ä–∞–Ω—è—â–∏—Ö—Å—è –≤ –¥–µ—Ä–µ–≤–µ. –î–æ–ª–∂–µ–Ω —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Comparable.
 */
class BTreeInsert<T extends Comparable<T>> extends BTreeOperations<T> {


    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä.
     *
     * @param t       –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å –¥–µ—Ä–µ–≤–∞.
     * @param setRoot –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ä–Ω—è.
     */
    final BTree<T> btree;
    public BTreeInsert(int t, BTree<T> btree) {
        super(t);
        this.btree = btree;
    }

    /**
     * –í—Å—Ç–∞–≤–ª—è–µ—Ç –∫–ª—é—á –≤ –¥–µ—Ä–µ–≤–æ.
     * –ï—Å–ª–∏ —É–∑–µ–ª –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, –æ–Ω —Ä–∞–∑–¥–µ–ª—è–µ—Ç—Å—è, –∏ –∫–ª—é—á –≤—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –¥–æ—á–µ—Ä–Ω–∏–π —É–∑–µ–ª.
     *
     *
     * @param key     –ö–ª—é—á –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏.
     * @param pointer –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –¥–∞–Ω–Ω—ã–µ.
     */
    public void insert(T key, Long pointer) {
        System.out.println("\nüöÄ –í—Å—Ç–∞–≤–∫–∞ –∫–ª—é—á–∞: " + key);

        if (btree.getRoot().keys.size() == (2 * t - 1)) {  // –ï—Å–ª–∏ –∫–æ—Ä–µ–Ω—å –∑–∞–ø–æ–ª–Ω–µ–Ω - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            System.out.println("‚ö†Ô∏è –ö–æ—Ä–µ–Ω—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ—Ä–µ–Ω—å");

            BTreeNode<T> newRoot = new BTreeNode<>(false);
            newRoot.children.add(btree.getRoot());
            splitChild(newRoot, 0);

            btree.setRoot(newRoot);
              // –ù–æ–≤—ã–π –∫–æ—Ä–µ–Ω—å
            System.out.println("‚úÖ –ù–æ–≤—ã–π –∫–æ—Ä–µ–Ω—å —Å–æ–∑–¥–∞–Ω: " + btree.getRoot().keys);
        }

        insertNonFull(btree.getRoot(), key, pointer);
    }



    /**
     * –í—Å—Ç–∞–≤–ª—è–µ—Ç –∫–ª—é—á –∏ —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–µ–ø–æ–ª–Ω—ã–π —É–∑–µ–ª.
     *
     * @param node    –£–∑–µ–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤—Å—Ç–∞–≤–ª—è–µ–º –∫–ª—é—á.
     * @param key     –ö–ª—é—á –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏.
     * @param pointer –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –¥–∞–Ω–Ω—ã–µ.
     */

    public  void insertNonFull(BTreeNode<T> node, T key, Long pointer) {
        System.out.println("üîπ –í—ã–∑–≤–∞–Ω insertNonFull –¥–ª—è —É–∑–ª–∞: " + node.keys + " —Å –∫–ª—é—á–æ–º: " + key);

        int i = node.keys.size() - 1;

        if (node.isLeaf) {  // –ï—Å–ª–∏ –ª–∏—Å—Ç, –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤–ª—è–µ–º
            System.out.println("  üîπ –£–∑–µ–ª " + node.keys + " - —ç—Ç–æ –ª–∏—Å—Ç. –ò—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏...");

            while (i >= 0 && key.compareTo(node.keys.get(i)) < 0) {
                i--;
            }

            node.keys.add(i + 1, key);
            node.pointers.add(i + 1, new ArrayList<>(List.of(pointer)));
            System.out.println("  ‚úÖ –í—Å—Ç–∞–≤–∏–ª–∏ –∫–ª—é—á " + key + " –≤ –ª–∏—Å—Ç. –ò—Ç–æ–≥–æ–≤—ã–π —É–∑–µ–ª: " + node.keys);
        } else {  // –ï—Å–ª–∏ –Ω–µ –ª–∏—Å—Ç, –∏—â–µ–º –Ω—É–∂–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞
            while (i >= 0 && key.compareTo(node.keys.get(i)) < 0) {
                i--;
            }
            i++;

            System.out.println("  üîπ –ë—É–¥–µ–º –≤—Å—Ç–∞–≤–ª—è—Ç—å –∫–ª—é—á " + key + " –≤ –¥–æ—á–µ—Ä–Ω–∏–π —É–∑–µ–ª " + node.children.get(i).keys);

            if (node.children.get(i).keys.size() == (2 * t - 1)) {  // –ï—Å–ª–∏ —Ä–µ–±–µ–Ω–æ–∫ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, —Ä–∞–∑–¥–µ–ª—è–µ–º –µ–≥–æ
                System.out.println("  ‚ö†Ô∏è –î–æ—á–µ—Ä–Ω–∏–π —É–∑–µ–ª " + node.children.get(i).keys + " –ü–ï–†–ï–ü–û–õ–ù–ò–õ–°–Ø! –†–∞–∑–¥–µ–ª—è–µ–º...");
                splitChild(node, i);

                if (key.compareTo(node.keys.get(i)) > 0) {
                    i++;
                }
            }

            insertNonFull(node.children.get(i), key, pointer);
        }
    }













}