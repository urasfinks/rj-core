package ru.jamsys.core.flat.btree;

import lombok.Getter;
import lombok.Setter;

import java.util.List;
import java.util.Map;

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è B-–¥–µ—Ä–µ–≤–æ–º.
 *
 * @param <T> –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö, —Ö—Ä–∞–Ω—è—â–∏—Ö—Å—è –≤ –¥–µ—Ä–µ–≤–µ. –î–æ–ª–∂–µ–Ω —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Comparable.
 */
public class BTree<T extends Comparable<T>> {

    @Getter
    @Setter
    private BTreeNode<T> root;

    private final BTreeInsert<T> inserter;

    private final BTreeDelete<T> deleter;

    private final BTreeSearch<T> searcher;

    private final BTreeRangeSearch<T> rangeSearcher;

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä.
     *
     * @param t –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å –¥–µ—Ä–µ–≤–∞.
     */

    final int t;

    public BTree(int t) {
        this.t = t;
        this.root = new BTreeNode<>(true);
        this.inserter = new BTreeInsert<>(t, this);
        this.deleter = new BTreeDelete<>(this, t);
        this.searcher = new BTreeSearch<>(t);
        this.rangeSearcher = new BTreeRangeSearch<>(t);
    }

    /**
     * –ò—â–µ—Ç –∫–ª—é—á –≤ –¥–µ—Ä–µ–≤–µ.
     *
     * @param key –ö–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞.
     * @return true, –µ—Å–ª–∏ –∫–ª—é—á –Ω–∞–π–¥–µ–Ω.
     */
    public Map<T, List<Long>> search(T key) {
        return searcher.search(root, key);
    }

    /**
     * –í—Å—Ç–∞–≤–ª—è–µ—Ç –∫–ª—é—á –≤ –¥–µ—Ä–µ–≤–æ.
     *
     * @param key –ö–ª—é—á –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏.
     */
    public void insert(T key, long pointer) {
        BTreeNode<T> node = findNodeWithKey(root, key);
        if (node != null) {
            int index = node.keys.indexOf(key);
            if (index != -1) {
                System.out.println("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –¥–ª—è –∫–ª—é—á–∞ " + key);
                node.pointers.get(index).add(pointer); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π pointer
                return;
            }
        }

        System.out.println("\nüöÄ –í—Å—Ç–∞–≤–∫–∞ –∫–ª—é—á–∞: " + key);

        if (root.keys.size() == (2 * t - 1)) {
            System.out.println("‚ö†Ô∏è –ö–æ—Ä–µ–Ω—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ—Ä–µ–Ω—å");
            BTreeNode<T> newRoot = new BTreeNode<>(false);
            newRoot.children.add(root);
            inserter.splitChild(newRoot, 0);
            root = newRoot;
            System.out.println("‚úÖ –ù–æ–≤—ã–π –∫–æ—Ä–µ–Ω—å —Å–æ–∑–¥–∞–Ω: " + root.keys);
        } else {
            System.out.println("‚úÖ –ö–æ—Ä–µ–Ω—å –Ω–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω. –í—Å—Ç–∞–≤–ª—è–µ–º –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π.");
        }

        inserter.insertNonFull(root, key, pointer);
    }



    /**
     * –£–¥–∞–ª—è–µ—Ç –∫–ª—é—á –∏–∑ –¥–µ—Ä–µ–≤–∞.
     *
     * @param key –ö–ª—é—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
     */
    public void delete(T key) {
        deleter.delete(key);
    }

    /**
     * –ò—â–µ—Ç –≤—Å–µ –∫–ª—é—á–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [start, end].
     *
     * @param start –ù–∞—á–∞–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ).
     * @param end   –ö–æ–Ω–µ—Ü –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ).
     * @return –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π, –ø–æ–ø–∞–¥–∞—é—â–∏—Ö –≤ –¥–∏–∞–ø–∞–∑–æ–Ω.
     */
    public Map<T, List<Long>> searchRange(T start, T end) {
        return rangeSearcher.searchRange(root, start, end);
    }

    private BTreeNode<T> findNodeWithKey(BTreeNode<T> node, T key) {
        if (node == null) return null;

        // –ò—â–µ–º –∫–ª—é—á –≤ —Ç–µ–∫—É—â–µ–º —É–∑–ª–µ
        int i = 0;
        while (i < node.keys.size() && key.compareTo(node.keys.get(i)) > 0) {
            i++;
        }

        // –ï—Å–ª–∏ –∫–ª—é—á –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–º —É–∑–ª–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
        if (i < node.keys.size() && key.equals(node.keys.get(i))) {
            return node;
        }

        // –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –ª–∏—Å—Ç–∞ - –∫–ª—é—á–∞ —Ç–æ—á–Ω–æ –Ω–µ—Ç
        if (node.isLeaf) {
            return null;
        }

        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤ –ø–æ–¥—Ö–æ–¥—è—â–µ–º –¥–æ—á–µ—Ä–Ω–µ–º —É–∑–ª–µ
        return findNodeWithKey(node.children.get(i), key);
    }
}
